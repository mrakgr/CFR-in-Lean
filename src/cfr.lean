import helpers

def regret_match {n : nat} (a : array n rat) :=
    let sum := a.foldl 0 (fun a s, max a 0 + s) in
    if sum = 0 then have v : rat, from 1 / n, array.init n (fun _, v)
    else a.map (fun a, max a 0 / sum)

structure Node {ùî∏ : Type*} (actions : Œ£ (n : nat), fin n ‚Üí ùî∏) := mk :: 
    (strategy_sum : array actions.1 rat) 
    (regret_sum : array actions.1 rat)

def Infosets {‚Ñç ùî∏ : Type*} [lt : has_lt ‚Ñç]
        (actions : ‚àÄ (h : ‚Ñç), Œ£ action_count, fin action_count ‚Üí ùî∏)
    := drbmap ‚Ñç (Node ‚àò actions) lt.lt

def Node_from_actions {ùî∏ : Type*} (actions : Œ£ (n : nat), fin n ‚Üí ùî∏) := 
    {Node . 
        strategy_sum := array.init actions.1 (fun _, 0), 
        regret_sum := array.init actions.1 (fun _, 0)
        }

def response {‚Ñç ùî∏ : Type*} [lt : has_lt ‚Ñç] [decidable_rel lt.lt]
        (ha : ‚Ñç ‚Üí Œ£ (n : nat), fin n ‚Üí ùî∏)
        (is_updateable : bool) (h : ‚Ñç) (one_probability two_probability : rat) 
        (next : ùî∏ ‚Üí rat ‚Üí Infosets ha -> rat √ó Infosets ha) (infosets : Infosets ha) 
        : rat √ó Infosets ha :=
    let (‚ü® h' , node‚ü© , infosets) := memoize infosets (fun h, Node_from_actions $ ha h) h in
    let action_probability := regret_match node.regret_sum in
    let ‚ü® action_utility, infosets ‚ü© := 
        actions_map_foldl2 (ha h').2 action_probability 
            infosets (fun action action_probability infosets, 
                if action_probability = 0 ‚àß two_probability = 0 then (0, infosets) -- the pruning optimization
                else next action (one_probability * action_probability) infosets
                ) in
    let action_utility_utility_weighted_sum := 
        @nat.foldl.fin (fun i, rat) (ha h').1 0 
            (fun i s, s + action_utility.read i * action_probability.read i) in
    let infosets := 
        match is_updateable with
        | tt := 
            let add (f : ‚Ñö ‚Üí ‚Ñö) (a b : array (ha h').1 ‚Ñö) := array.map‚ÇÇ (fun s x, s + f x) a b in 
            infosets.insert h' {
                strategy_sum := add (fun action_probability, one_probability * action_probability) node.strategy_sum action_probability,
                regret_sum := add (fun action_utility, two_probability * (action_utility - action_utility_utility_weighted_sum)) node.regret_sum action_utility
                }
        | ff := infosets
        end in

    (-action_utility_utility_weighted_sum, infosets)
